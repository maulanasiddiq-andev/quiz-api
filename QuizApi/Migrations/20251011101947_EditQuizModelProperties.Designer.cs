// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizApi.Models;

#nullable disable

namespace QuizApi.Migrations
{
    [DbContext(typeof(QuizAppDBContext))]
    [Migration("20251011101947_EditQuizModelProperties")]
    partial class EditQuizModelProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizApi.Models.Auth.OtpModel", b =>
                {
                    b.Property<string>("OtpId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OtpCode")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("OtpId");

                    b.ToTable("Otp");
                });

            modelBuilder.Entity("QuizApi.Models.Auth.UserTokenModel", b =>
                {
                    b.Property<string>("UserTokenId")
                        .HasColumnType("text");

                    b.Property<string>("Browser")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAccessAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<double?>("LocationLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("LocationLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiredTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("UserTokenId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("QuizApi.Models.Identity.UserModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.AnswerModel", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("text");

                    b.Property<int>("AnswerOrder")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsTrueAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.Property<string>("QuestionModelQuestionId")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionModelQuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.CategoryModel", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuestionModel", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer");

                    b.Property<string>("QuizId")
                        .HasColumnType("text");

                    b.Property<string>("QuizModelQuizId")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizModelQuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuizModel", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HistoriesCount")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("QuizId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.AnswerHistoryModel", b =>
                {
                    b.Property<string>("AnswerHistoryId")
                        .HasColumnType("text");

                    b.Property<int>("AnswerOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsTrueAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionHistoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionHistoryModelQuestionHistoryId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("AnswerHistoryId");

                    b.HasIndex("QuestionHistoryModelQuestionHistoryId");

                    b.ToTable("AnswerHistory");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuestionHistoryModel", b =>
                {
                    b.Property<string>("QuestionHistoryId")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnswerTrue")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer");

                    b.Property<string>("QuizHistoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizHistoryModelQuizHistoryId")
                        .HasColumnType("text");

                    b.Property<int?>("SelectedAnswerOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionHistoryId");

                    b.HasIndex("QuizHistoryModelQuizHistoryId");

                    b.ToTable("QuestionHistory");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuizHistoryModel", b =>
                {
                    b.Property<string>("QuizHistoryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("QuizVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TrueAnswers")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("integer");

                    b.HasKey("QuizHistoryId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizHistory");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.AnswerModel", b =>
                {
                    b.HasOne("QuizApi.Models.Quiz.QuestionModel", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionModelQuestionId");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuestionModel", b =>
                {
                    b.HasOne("QuizApi.Models.Quiz.QuizModel", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizModelQuizId");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuizModel", b =>
                {
                    b.HasOne("QuizApi.Models.Quiz.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizApi.Models.Identity.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.AnswerHistoryModel", b =>
                {
                    b.HasOne("QuizApi.Models.QuizHistory.QuestionHistoryModel", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionHistoryModelQuestionHistoryId");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuestionHistoryModel", b =>
                {
                    b.HasOne("QuizApi.Models.QuizHistory.QuizHistoryModel", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizHistoryModelQuizHistoryId");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuizHistoryModel", b =>
                {
                    b.HasOne("QuizApi.Models.Quiz.QuizModel", "Quiz")
                        .WithMany("Histories")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApi.Models.Identity.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuestionModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizApi.Models.Quiz.QuizModel", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuestionHistoryModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizApi.Models.QuizHistory.QuizHistoryModel", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
